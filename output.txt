2025-07-02 23:47:43.535682: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-07-02 23:47:43.551481: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:467] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1751514463.570813 1261251 cuda_dnn.cc:8579] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered
E0000 00:00:1751514463.576712 1261251 cuda_blas.cc:1407] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered
W0000 00:00:1751514463.592257 1261251 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.
W0000 00:00:1751514463.592278 1261251 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.
W0000 00:00:1751514463.592280 1261251 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.
W0000 00:00:1751514463.592282 1261251 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.
2025-07-02 23:47:43.596725: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX512F AVX512_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
Start of Process

Resuming process from previous progress:
{
    "preprocessing": true,
    "cell_type_cluster": true,
    "sample_distance_calculation": true,
    "DimensionalityReduction": true,
    "trajectory_analysis": true,
    "visualize_data": true,
    "initialization": false
}
Linux system detected.


Enabling managed memory for RMM...


Processing X_DR_proportion...

The CCA score for X_DR_proportion is 0.4255

Saved CCA plot to: /dcl01/hongkai/data/data/hjiang/result/CCA/pca_2d_cca_proportion.pdf
Processing X_DR_expression...

The CCA score for X_DR_expression is 0.7044

Saved CCA plot to: /dcl01/hongkai/data/data/hjiang/result/CCA/pca_2d_cca_expression.pdf
CCA analysis completed.

[CCA] Total runtime: 0.86 seconds

🚀 Using PROFILED GPU version of optimal resolution
⏱️  Directory setup: 0.00 seconds

📊 Starting RNA-seq resolution optimization with detailed timing...
Using representation: X_pca with 20 components
Will compute corrected p-values with 1000 simulations per resolution

🔍 === FIRST PASS: Coarse Search ===

🎯 Testing resolution: 0.10
  ⏱️  Cleanup: 0.037 seconds
2025-07-02 23:49:59 - INFO - init
⏱️    🧬 Cell clustering: 36.48 seconds
⏱️    📋 Cell type assignment: 0.06 seconds
  📊 Number of clusters: 5
... storing 'batch' as categorical
... storing 'batch' as categorical
... storing 'batch' as categorical
... storing 'batch' as categorical
... storing 'batch' as categorical
⏱️    🧪 Pseudobulk computation: 245.57 seconds
⏱️    📐 Dimension reduction: 0.07 seconds

The CCA score for X_DR_proportion is 0.4363

  ⏱️  CCA analysis: 0.002 seconds
  🎯 CCA Score = 0.4363
Saved CCA plot to: /dcl01/hongkai/data/data/hjiang/result/RNA_resolution_optimization_X_DR_proportion/resolutions/resolution_0.10/cca_plot_res_0.10.png
  ⏱️  CCA plot generation: 0.559 seconds
⏱️    🎲 Null distribution (1000 sims): 2.72 seconds
  ⏱️  P-value computation: 0.000 seconds
  📈 Standard p-value = 0.0000
  ⏱️  TOTAL for resolution 0.10: 285.49 seconds

🎯 Testing resolution: 0.20
  ⏱️  Cleanup: 0.039 seconds
⏱️    🧬 Cell clustering: 31.52 seconds
⏱️    📋 Cell type assignment: 0.06 seconds
  📊 Number of clusters: 6
... storing 'batch' as categorical
... storing 'batch' as categorical
... storing 'batch' as categorical
... storing 'batch' as categorical
... storing 'batch' as categorical
... storing 'batch' as categorical
⏱️    🧪 Pseudobulk computation: 271.01 seconds
⏱️    📐 Dimension reduction: 0.05 seconds

The CCA score for X_DR_proportion is 0.4359

  ⏱️  CCA analysis: 0.002 seconds
  🎯 CCA Score = 0.4359
Saved CCA plot to: /dcl01/hongkai/data/data/hjiang/result/RNA_resolution_optimization_X_DR_proportion/resolutions/resolution_0.20/cca_plot_res_0.20.png
  ⏱️  CCA plot generation: 0.582 seconds
⏱️    🎲 Null distribution (1000 sims): 2.70 seconds
  ⏱️  P-value computation: 0.000 seconds
  📈 Standard p-value = 0.0000
  ⏱️  TOTAL for resolution 0.20: 305.99 seconds

🎯 Testing resolution: 0.30
  ⏱️  Cleanup: 0.039 seconds
⏱️    🧬 Cell clustering: 32.13 seconds
⏱️    📋 Cell type assignment: 0.06 seconds
  📊 Number of clusters: 6
... storing 'batch' as categorical
... storing 'batch' as categorical
... storing 'batch' as categorical
... storing 'batch' as categorical
... storing 'batch' as categorical
... storing 'batch' as categorical
⏱️    🧪 Pseudobulk computation: 271.66 seconds
⏱️    📐 Dimension reduction: 0.05 seconds

The CCA score for X_DR_proportion is 0.4365

  ⏱️  CCA analysis: 0.002 seconds
  🎯 CCA Score = 0.4365
Saved CCA plot to: /dcl01/hongkai/data/data/hjiang/result/RNA_resolution_optimization_X_DR_proportion/resolutions/resolution_0.30/cca_plot_res_0.30.png
  ⏱️  CCA plot generation: 0.570 seconds
⏱️    🎲 Null distribution (1000 sims): 2.71 seconds
  ⏱️  P-value computation: 0.000 seconds
  📈 Standard p-value = 0.0000
  ⏱️  TOTAL for resolution 0.30: 307.25 seconds

🎯 Testing resolution: 0.40
  ⏱️  Cleanup: 0.043 seconds
⏱️    🧬 Cell clustering: 31.96 seconds
⏱️    📋 Cell type assignment: 0.06 seconds
  📊 Number of clusters: 7
... storing 'batch' as categorical
... storing 'batch' as categorical
... storing 'batch' as categorical
... storing 'batch' as categorical
... storing 'batch' as categorical
... storing 'batch' as categorical
... storing 'batch' as categorical
⏱️    🧪 Pseudobulk computation: 277.08 seconds
⏱️    📐 Dimension reduction: 0.05 seconds

The CCA score for X_DR_proportion is 0.4500

  ⏱️  CCA analysis: 0.002 seconds
  🎯 CCA Score = 0.4500
Saved CCA plot to: /dcl01/hongkai/data/data/hjiang/result/RNA_resolution_optimization_X_DR_proportion/resolutions/resolution_0.40/cca_plot_res_0.40.png
  ⏱️  CCA plot generation: 0.572 seconds
⏱️    🎲 Null distribution (1000 sims): 2.74 seconds
  ⏱️  P-value computation: 0.000 seconds
  📈 Standard p-value = 0.0000
  ⏱️  TOTAL for resolution 0.40: 312.54 seconds

🎯 Testing resolution: 0.50
  ⏱️  Cleanup: 0.044 seconds
⏱️    🧬 Cell clustering: 32.24 seconds
⏱️    📋 Cell type assignment: 0.06 seconds
  📊 Number of clusters: 12
... storing 'batch' as categorical
... storing 'batch' as categorical
... storing 'batch' as categorical
... storing 'batch' as categorical
... storing 'batch' as categorical
... storing 'batch' as categorical
... storing 'batch' as categorical
... storing 'batch' as categorical
... storing 'batch' as categorical
... storing 'batch' as categorical
... storing 'batch' as categorical
... storing 'batch' as categorical
⏱️    🧪 Pseudobulk computation: 362.63 seconds
⏱️    📐 Dimension reduction: 0.05 seconds

The CCA score for X_DR_proportion is 0.4479

  ⏱️  CCA analysis: 0.002 seconds
  🎯 CCA Score = 0.4479
Saved CCA plot to: /dcl01/hongkai/data/data/hjiang/result/RNA_resolution_optimization_X_DR_proportion/resolutions/resolution_0.50/cca_plot_res_0.50.png
  ⏱️  CCA plot generation: 0.547 seconds
⏱️    🎲 Null distribution (1000 sims): 2.79 seconds
  ⏱️  P-value computation: 0.000 seconds
  📈 Standard p-value = 0.0000
  ⏱️  TOTAL for resolution 0.50: 398.40 seconds

🎯 Testing resolution: 0.60
  ⏱️  Cleanup: 0.042 seconds
⏱️    🧬 Cell clustering: 32.49 seconds
⏱️    📋 Cell type assignment: 0.06 seconds
  📊 Number of clusters: 16
... storing 'batch' as categorical
... storing 'batch' as categorical
... storing 'batch' as categorical
... storing 'batch' as categorical
... storing 'batch' as categorical
... storing 'batch' as categorical
... storing 'batch' as categorical
Traceback (most recent call last):
  File "/users/hjiang/GenoDistance/code/GenoDistance.py", line 69, in <module>
    main()
  File "/users/hjiang/GenoDistance/code/GenoDistance.py", line 63, in main
    wrapper(**config)
  File "/users/hjiang/GenoDistance/code/wrapper.py", line 523, in wrapper
    find_optimal_cell_resolution_linux(
  File "/users/hjiang/GenoDistance/code/linux/CCA_test_linux.py", line 136, in find_optimal_cell_resolution_linux
    pseudobulk_dict, pseudobulk_adata = time_function(
  File "/users/hjiang/GenoDistance/code/linux/CCA_test_linux.py", line 39, in time_function
    result = func(*args, **kwargs)
  File "/users/hjiang/GenoDistance/code/pseudo_adata_linux.py", line 888, in compute_pseudobulk_adata_linux
    return compute_pseudobulk_adata_optimized(
  File "/users/hjiang/GenoDistance/code/pseudo_adata_linux.py", line 834, in compute_pseudobulk_adata_optimized
    cell_expression_hvg_df, cell_proportion_df, final_adata = compute_pseudobulk_layers_torch(
  File "/users/hjiang/GenoDistance/code/pseudo_adata_linux.py", line 285, in compute_pseudobulk_layers_torch
    hvg_genes, hvg_expr = _select_hvgs_torch_memory_efficient(
  File "/users/hjiang/GenoDistance/code/pseudo_adata_linux.py", line 531, in _select_hvgs_torch_memory_efficient
    sc.pp.combat(temp_adata, key=batch_col)
  File "/users/hjiang/.conda/envs/hongkai/lib/python3.10/site-packages/legacy_api_wrap/__init__.py", line 82, in fn_compatible
    return fn(*args_all, **kw)
  File "/users/hjiang/.conda/envs/hongkai/lib/python3.10/site-packages/scanpy/preprocessing/_combat.py", line 239, in combat
    gamma, delta = _it_sol(
  File "/users/hjiang/.conda/envs/hongkai/lib/python3.10/site-packages/scanpy/preprocessing/_combat.py", line 339, in _it_sol
    sum2 = sum2.sum(axis=1)
  File "/users/hjiang/.conda/envs/hongkai/lib/python3.10/site-packages/numpy/core/_methods.py", line 47, in _sum
    def _sum(a, axis=None, dtype=None, out=None, keepdims=False,
KeyboardInterrupt

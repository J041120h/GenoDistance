================================================================================
H5AD MEMORY INSPECTION REPORT
File: /dcs07/hongkai/data/harry/result/multiomics/preprocess/atac_rna_integrated.h5ad
File size on disk: 18.89 GB
================================================================================

Loading file...

Basic Information:
  Number of observations (cells): 861,190
  Number of variables (genes): 36,601

----------------------------------------
1. MAIN DATA MATRIX (X)
----------------------------------------
  Memory usage: 234.85 GB
  Type: <class 'numpy.ndarray'>
  Data type: float64
  Shape: (861190, 36601)
  ⚠️  Issues found:
    - Dense matrix with 86.0% zeros
    - Using float64 precision
  💡 Recommendations:
    - Convert to sparse format (could save ~86% memory)
    - Consider float32 if precision allows

----------------------------------------
2. LAYERS
----------------------------------------
  No layers found

----------------------------------------
3. OBSERVATIONS METADATA (obs)
----------------------------------------
  Total memory: 120.75 MB
  Number of columns: 6

  Top memory-consuming columns:
    'balancing_weight': 116.63 MB (dtype: float64)
    'sample': 110.89 MB (dtype: category)
    'cell_type': 110.88 MB (dtype: category)
    'cell_type_original': 110.88 MB (dtype: category)
    'tissue': 110.88 MB (dtype: category)
    'modality': 110.88 MB (dtype: category)

----------------------------------------
4. VARIABLES METADATA (var)
----------------------------------------
  Total memory: 3.26 MB
  Number of columns: 0

----------------------------------------
5. DIMENSIONAL REDUCTIONS (obsm)
----------------------------------------
  'X_glue':
    Memory: 164.26 MB
    Shape: (861190, 50)
    Data type: float32
  'X_lsi':
    Memory: 328.52 MB
    Shape: (861190, 50)
    Data type: float64
    💡 Consider float32 for embeddings
  'X_pca':
    Memory: 164.26 MB
    Shape: (861190, 50)
    Data type: float32

  Total obsm memory: 657.04 MB

----------------------------------------
6. VARIABLE EMBEDDINGS (varm)
----------------------------------------
  No variable embeddings found

----------------------------------------
7. UNSTRUCTURED DATA (uns)
----------------------------------------
  Total memory: 1.38 KB

  Top memory-consuming items:
    'cell_type_linkage': 736.00 B (ndarray)
    'neighbors': 385.00 B (dict)
    'cluster_mapping': 192.00 B (dict)
    'leiden': 96.00 B (dict)

----------------------------------------
8. PAIRWISE MATRICES
----------------------------------------
  Observation pairwise (obsp):
    'connectivities': 152.87 MB
    'distances': 101.84 MB
  No variable pairwise matrices found

================================================================================
MEMORY SUMMARY
================================================================================

Total estimated memory in RAM: 235.86 GB

Breakdown by component:
  X         :    234.85 GB ( 99.6%)
  obsm      :    657.04 MB (  0.3%)
  obsp      :    254.71 MB (  0.1%)
  obs       :    120.75 MB (  0.0%)
  var       :      3.26 MB (  0.0%)
  uns       :      1.38 KB (  0.0%)

================================================================================
OPTIMIZATION RECOMMENDATIONS
================================================================================

1. Convert main matrix X from float64 to float32 (save ~117.42 GB)

2. Convert embeddings to float32: X_lsi

================================================================================
END OF REPORT
================================================================================

================================================================================
OPTIMIZATION CODE SUGGESTIONS
================================================================================

# Here's example code to optimize your h5ad file:

import scanpy as sc
import numpy as np
from scipy.sparse import csr_matrix

# Load the original file
adata = sc.read_h5ad('/dcs07/hongkai/data/harry/result/multiomics/preprocess/atac_rna_integrated.h5ad')

# 1. Convert main matrix to float32 if using float64
if hasattr(adata.X, 'dtype') and adata.X.dtype == np.float64:
    if issparse(adata.X):
        adata.X = adata.X.astype(np.float32)
    else:
        adata.X = adata.X.astype(np.float32)
    print("Converted X to float32")

# 2. Convert dense matrix to sparse if mostly zeros
if isinstance(adata.X, np.ndarray):
    zero_fraction = np.sum(adata.X == 0) / adata.X.size
    if zero_fraction > 0.5:
        adata.X = csr_matrix(adata.X)
        print(f"Converted X to sparse ({zero_fraction:.1%} zeros)")

# 3. Optimize layers
for layer_name in list(adata.layers.keys()):
    layer = adata.layers[layer_name]
    
    # Convert to float32
    if hasattr(layer, 'dtype') and layer.dtype == np.float64:
        adata.layers[layer_name] = layer.astype(np.float32)
    
    # Convert to sparse if beneficial
    if isinstance(layer, np.ndarray):
        zero_fraction = np.sum(layer == 0) / layer.size
        if zero_fraction > 0.5:
            adata.layers[layer_name] = csr_matrix(layer)

# 4. Optimize embeddings
for key in adata.obsm.keys():
    if hasattr(adata.obsm[key], 'dtype') and adata.obsm[key].dtype == np.float64:
        adata.obsm[key] = adata.obsm[key].astype(np.float32)

# 5. Convert string columns to categorical
for col in adata.obs.columns:
    if adata.obs[col].dtype == 'object':
        unique_ratio = len(adata.obs[col].unique()) / len(adata.obs[col])
        if unique_ratio < 0.5:  # Less than 50% unique values
            adata.obs[col] = adata.obs[col].astype('category')

for col in adata.var.columns:
    if adata.var[col].dtype == 'object':
        unique_ratio = len(adata.var[col].unique()) / len(adata.var[col])
        if unique_ratio < 0.5:
            adata.var[col] = adata.var[col].astype('category')

# 6. Remove unnecessary data from uns
# Review what's in adata.uns and remove unneeded items
# Example: del adata.uns['some_large_unnecessary_key']

# 7. Save optimized file
output_path = '/dcs07/hongkai/data/harry/result/multiomics/preprocess/atac_rna_integrated.h5ad'.replace('.h5ad', '_optimized.h5ad')
adata.write_h5ad(output_path, compression='gzip')
print(f"Saved optimized file to: {output_path}")

